package Stream;

import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Arrays;
import java.util.IntSummaryStatistics;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collectors;

import javax.swing.JButton;
import javax.swing.JFrame;

public class Streamlambda {
	public static void main(String[] args) {
		// new Streamlambda().lambda2Predicate();
		List<String> languages = Arrays.asList("Java", "Scala", "C++", "Haskell", "Lisp");

		// new Streamlambda().lambdaJoinPredicate(languages);
		// new Streamlambda().lamdba2Map();
		new Streamlambda().lamdbaCreateNewStringList();
	}

	/**
	 * (params) -> expression (params) -> statement (params) -> { statements }
	 * 用lambda表达式实现Runnable
	 */
	public void lambdaToRunnable() {
		new Thread(new Runnable() {
			@Override
			public void run() {
				System.out.println("Before Java8, too much code for too little to do");
			}
		}).start();
		// JAVA 8
		new Thread(() -> System.out.println("In Java8, Lambda expression rocks !!")).start();
	}

	/**
	 * 使用Java 8 lambda表达式进行事件处理 经常使用匿名类的另一个地方是为 Collections.sort() 定制
	 * Comparator。在Java
	 * 8中，你可以用更可读的lambda表达式换掉丑陋的匿名类。我把这个留做练习，应该不难，可以按照我在使用lambda表达式实现 Runnable 和
	 * ActionListener 的过程中的套路来做。
	 */
	public void lambdaToEventHandle() {
		JFrame frame = new JFrame();
		JButton show1 = new JButton("show1");
		JButton show2 = new JButton("show2");
		show1.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				System.out.println("Event handling without lambda expression is boring");
			}
		});
		show2.addActionListener(e -> {
			System.out.println("Light, Camera, Action !! Lambda expressions Rocks");
		});
		frame.add(show1);
		frame.add(show2);
		frame.setLayout(new FlowLayout());
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
		frame.setVisible(true);
	}

	/**
	 * 使用lambda表达式对列表进行迭代 列表循环的最后一个例子展示了如何在Java 8中使用方法引用（method
	 * reference）。你可以看到C++里面的双冒号、范围解析操作符现在在Java 8中用来表示方法引用。
	 */
	public void lambdaToListIteration() {
		List<String> features = Arrays.asList("Lambdas", "Default Method", "Stream API", "Date and Time API");
		for (String feature : features) {
			System.out.println(feature);
		}
		features.forEach(n -> System.out.println(n));
		features.forEach(System.out::println);
	}

	/**
	 * 除了在语言层面支持函数式编程风格，Java 8也添加了一个包，叫做
	 * java.util.function。它包含了很多类，用来支持Java的函数式编程。其中一个便是Predicate，使用
	 * java.util.function.Predicate
	 * 函数式接口以及lambda表达式，可以向API方法添加逻辑，用更少的代码支持更多的动态行为。下面是Java 8 Predicate
	 * 的例子，展示了过滤集合数据的多种常用方法。Predicate接口非常适用于做过滤。 可以看到，Stream
	 * API的过滤方法也接受一个Predicate，这意味着可以将我们定制的 filter()
	 * 方法替换成写在里面的内联代码，这就是lambda表达式的魔力。另外，Predicate接口也允许进行多重条件的测试
	 */
	public void lambda2Predicate() {
		List<String> languages = Arrays.asList("Java", "Scala", "C++", "Haskell", "Lisp");

		System.out.println("Languages which starts with J :");
		filter(languages, (str) -> ((String) str).startsWith("J"));

		System.out.println("Languages which ends with a ");
		filter(languages, (str) -> ((String) str).endsWith("a"));

		System.out.println("Print all languages :");
		filter(languages, (str) -> true);

		System.out.println("Print no language : ");
		filter(languages, (str) -> false);

		System.out.println("Print language whose length greater than 4:");
		filter(languages, (str) -> ((String) str).length() > 4);
	}

	public static void filter(List<String> names, Predicate condition) {
		for (String name : names) {
			if (condition.test(name)) {
				System.out.println(name + " ");
			}
		}
	}

	/*
	 * public static void filter(List names, Predicate condition) {
	 * names.stream().filter((name) -> (condition.test(name))).forEach((name) -> {
	 * System.out.println(name + " "); }); }
	 */
	/**
	 * java.util.function.Predicate 允许将两个或更多的 Predicate
	 * 合成一个。它提供类似于逻辑操作符AND和OR的方法，名字叫做and()、or()和xor()，用于将传入 filter()
	 * 方法的条件合并起来。例如，要得到所有以J开始，长度为四个字母的语言，可以定义两个独立的 Predicate 示例分别表示每一个条件，然后用
	 * Predicate.and() 方法将它们合并起来，如下所示： 也可以使用 or() 和 xor() 方法。本例着重介绍了如下要点：可按需要将
	 * Predicate 作为单独条件然后将其合并起来使用。简而言之，你可以以传统Java命令方式使用 Predicate
	 * 接口，也可以充分利用lambda表达式达到事半功倍的效果。
	 */
	public void lambdaJoinPredicate(List<String> names) {
		// 甚至可以用and()、or()和xor()逻辑函数来合并Predicate，
		// 例如要找到所有以J开始，长度为四个字母的名字，你可以合并两个Predicate并传入
		Predicate<String> startsWithJ = (n) -> n.startsWith("J");
		Predicate<String> fourLetterLong = (n) -> n.length() == 4;
		names.stream().filter(startsWithJ.and(fourLetterLong))
				.forEach((n) -> System.out.println("nName, which starts with 'J' and four letter long is : " + n));
	}

	/**
	 * 本例介绍最广为人知的函数式编程概念map。它允许你将对象进行转换。例如在本例中，我们将 costBeforeTax 列表的每个元素转换成为税后的值。我们将
	 * x -> x*x lambda表达式传到 map() 方法，后者将其应用到流中的每一个元素。然后用 forEach()
	 * 将列表元素打印出来。使用流API的收集器类，可以得到所有含税的开销。有 toList() 这样的方法将 map
	 * 或任何其他操作的结果合并起来。由于收集器在流上做终端操作，因此之后便不能重用流了。你甚至可以用流API的 reduce()
	 * 方法将所有数字合成一个，下一个例子将会讲到。
	 */
	public void lamdba2Map() {
		// 不使用lambda表达式为每个订单加上12%的税
		List<Integer> costBeforeTax = Arrays.asList(100, 200, 300, 400, 500);
		for (Integer cost : costBeforeTax) {
			double price = cost + .12 * cost;
			System.out.println(price);
		}
		// 使用lambda表达式
		costBeforeTax.stream().map((cost) -> cost + .12 * cost).forEach(System.out::println);
		// 在上个例子中，可以看到map将集合类（例如列表）元素进行转换的。还有一个 reduce()
		// 函数可以将所有值合并成一个。Map和Reduce操作是函数式编程的核心操作，因为其功能，reduce 又被称为折叠操作。另外，reduce
		// 并不是一个新的操作，你有可能已经在使用它。SQL中类似 sum()、avg() 或者 count() 的聚集函数，实际上就是 reduce
		// 操作，因为它们接收多个值并返回一个值。流API定义的 reduceh()
		// 函数可以接受lambda表达式，并对所有值进行合并。IntStream这样的类有类似 average()、count()、sum() 的内建方法来做
		// reduce 操作，也有mapToLong()、mapToDouble() 方法来做转换。这并不会限制你，你可以用内建方法，也可以自己定义。在这个Java
		// 8的Map Reduce示例里，我们首先对所有价格应用 的VAT，然后用 reduce() 方法计算总和。
		// 新方法：
		double bill = costBeforeTax.stream().map((cost) -> cost + .12 * cost).reduce((sum, cost) -> sum + cost).get();
		System.out.println("Total : " + bill);
	}

	public void lamdbaCreateNewStringList() {
		List<String> strList = Arrays.asList("Java", "Scala", "C++", "Haskell", "Lisp");
		List<String> filtered = strList.stream().filter(x -> x.length() > 2).collect(Collectors.toList());
		System.out.printf("Original List : %s, filtered list : %s %n", strList, filtered);
	}

	/**
	 * 对列表的每个元素应用函数 我们通常需要对列表的每个元素使用某个函数，例如逐一乘以某个数、除以某个数或者做其它操作。这些操作都很适合用 map()
	 * 方法，可以将转换逻辑以lambda表达式的形式放在 map() 方法里，就可以对集合的各个元素进行转换了，如下所示。
	 */
	public void lamdbaForEvery() {
		// 将字符串换成大写并用逗号链接起来
		List<String> G7 = Arrays.asList("USA", "Japan", "France", "Germany", "Italy", "U.K.", "Canada");
		String G7Countries = G7.stream().map(x -> x.toUpperCase()).collect(Collectors.joining(", "));
		System.out.println(G7Countries);
	}

	/**
	 * 如何利用流的 distinct() 方法来对集合进行去重。
	 */
	public void lamdbaFdistinct() {
		// 用所有不同的数字创建一个正方形列表
		List<Integer> numbers = Arrays.asList(9, 10, 3, 4, 7, 3, 4);
		List<Integer> distinct = numbers.stream().map(i -> i * i).distinct().collect(Collectors.toList());
		System.out.printf("Original List : %s,  Square Without duplicates : %s %n", numbers, distinct);
	}

	/**
	 * 计算集合元素的最大值、最小值、总和以及平均值 IntStream、LongStream 和 DoubleStream 等流的类中，有个非常有用的方法叫做
	 * summaryStatistics() 。可以返回 IntSummaryStatistics、LongSummaryStatistics 或者
	 * DoubleSummaryStatistic s，描述流中元素的各种摘要数据。在本例中，我们用这个方法来计算列表的最大值和最小值。它也有 getSum()
	 * 和 getAverage() 方法来获得列表的所有元素的总和及平均值。
	 */
	public void count() {
		List<Integer> primes = Arrays.asList(2, 3, 5, 7, 11, 13, 17, 19, 23, 29);
		IntSummaryStatistics stats = primes.stream().mapToInt((x) -> x).summaryStatistics();
		System.out.println("Highest prime number in List : " + stats.getMax());
		System.out.println("Lowest prime number in List : " + stats.getMin());
		System.out.println("Sum of all prime numbers : " + stats.getSum());
		System.out.println("Average of all prime numbers : " + stats.getAverage());
	}
}
